(function () {
    "use strict";
    angular.module("angulargrid", []).directive("grid", function () {
        return {
            restrict: "E",
            scope: {
                content: "=name"
            },
            templateUrl: "/templates/ng-grid/angular-grid.template.html"
        }
    })
})(),
    function () {
        "use strict";
        var n = angular.module("app", ["angulargrid"]);
        n.factory("activeMenu", function () {
            return {
                menu: ""
            }
        })
    }(),
    function (n) {
        "use strict";
        n.factory("naviairApiResource", ["$http", function (n) {
            return {
                getSearch: function (t) {
                    return n({
                        method: "GET",
                        url: "/umbraco/api/naviairapi/getsearch",
                        params: t
                    })
                },
                getNodesForParent: function (t) {
                    return n({
                        method: "GET",
                        url: "/umbraco/api/naviairapi/getnodesforparent",
                        params: t
                    })
                }
            }
        }])
    }(angular.module("app")),
    function (n) {
        "use strict";
        n.requires.push("treeGrid");
        n.controller("Naviair.AimTreeViewController", ["$scope", "naviairApiResource", "$location", "$timeout", function (n, t, i, r) {
            function o(i, r) {
                i = i || 0;
                r = r || e;
                t.getSearch({
                    criterion: n.keywords,
                    skip: i,
                    take: r
                }).then(function (t) {
                    n.keywords !== "" && (n.tree_data = i === 0 ? t.data.nodes : n.tree_data.concat(t.data.nodes), t.data.total > n.tree_data.length && (n.showSeeMore = !0), $("#seemore-spiner").removeClass("naviair-fonts-spin3").removeClass("animate-spin"), $("#seemore").prop("disabled", !1));
                    n.searching = !1
                }, function () { })
            }
            var f = {},
                e = 50,
                u;
            n.loading = !0;
            n.loadMore = function () {
                $("#seemore-spiner").addClass("naviair-fonts-spin3").addClass("animate-spin");
                $("#seemore").prop("disabled", !0);
                o(n.tree_data.length, e)
            };
            n.my_tree_handler = function (n) {
            
                !n.isLoaded && n.isDir && n.hasChildren ? t.getNodesForParent({
                    parentId: n.id
                }).then(function (t) {
      
                    Array.prototype.push.apply(n.children, t.data);
                    n.isLoaded = !0;
                    n.expanded = !n.expanded
                }, function () { }) : n.expanded = !n.expanded
            };
            n.blobUrl = "https://naviair.blob.core.windows.net/files/";
            n.keywords = "";
            n.searching = !1;
            n.showSeeMore = !1;
            u = null;
            n.search = function () {
                if (n.showSeeMore = !1, u != null && r.cancel(u), n.keywords === "") {
                    n.tree_data = f;
                    n.searching = !1;
                    return
                }
                n.searching = !0;
                u = r(o, 300)
            };
            n.colsDisplayName = {
                title: "",
                name: ""
            };
            n.expanding_property = {
                field: "title",
                cellTemplate: '<a ng-if="!row.branch.isDir"  ng-href="{{ row.branch.href }}"  target="_blank" >{{row.branch[expandingProperty.field]}}<\/a><span ng-if="row.branch.isDir" >{{row.branch[expandingProperty.field]}}<\/span>'
            };
            n.col_defs = [{
                field: "name",
                cellTemplate: '<a ng-if="!row.branch.isDir"  ng-href="{{ row.branch.href }}"  target="_blank" >{{ row.branch[col.field] }}<\/a><span ng-if="row.branch.isDir" >{{ row.branch[col.field] }}<\/span>'
            }];
            t.getNodesForParent({
                parentId: ""
            }).then(function (t) {
                n.loading = !1;
                f = t.data;
                n.tree_data = t.data
            }, function () { });
            n.tree_data = []
        }])
    }(angular.module("app"));